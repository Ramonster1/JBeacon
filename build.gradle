plugins {
    id 'java-library'
    id("eu.kakde.gradle.sonatype-maven-central-publisher") version "1.0.6"
}

group = 'io.github.ramonster1'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

// Dependency versions as constants
ext {
    log4jVersion = '2.23.1'
    disruptorVersion = '4.0.0'
    aeronVersion = '1.47.4'
    lombokVersion = '1.18.36'
    mockitoVersion = '5.16.0'
    junitBomVersion = '5.11.0-M2'

    // ------------------------------------
    // PUBLISHING TO SONATYPE CONFIGURATION
    // ------------------------------------
    COMPONENT_TYPE = "java" // "java" or "versionCatalog"
    GROUP = 'io.github.ramonster1'
    ARTIFACT_ID = "jbeacon"
    VERSION = "1.0.0"
    PUBLISHING_TYPE = "AUTOMATIC" // USER_MANAGED or AUTOMATIC
    SHA_ALGORITHMS = ["SHA-256", "SHA-512"]
    // sha256 and sha512 are supported but not mandatory. Only sha1 is mandatory but it is supported by default.
    DESC = "A Java network polling library using NIO with Aeron messaging and scheduling support."
    LICENSE = "Apache-2.0"
    LICENSE_URL = "https://opensource.org/licenses/Apache-2.0"
    GITHUB_REPO = "Ramonster1/JBeacon"
    DEVELOPER_ID = "198125557"
    DEVELOPER_NAME = "Ramon Singh"
}

// Common JVM arguments
def jvmArguments = [
        '--add-opens', 'java.base/jdk.internal.misc=ALL-UNNAMED',
        '--add-opens', 'java.base/java.util.zip=ALL-UNNAMED'
]

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestCompileOnly.extendsFrom testCompileOnly
    integrationTestAnnotationProcessor.extendsFrom testAnnotationProcessor
}

dependencies {
    // Core libraries
    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    implementation "com.lmax:disruptor:${disruptorVersion}"
    implementation "io.aeron:aeron-all:${aeronVersion}"

    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // Integration test dependencies
    integrationTestImplementation "org.projectlombok:lombok:${lombokVersion}"
    integrationTestAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    integrationTestImplementation platform("org.junit:junit-bom:${junitBomVersion}")
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter'
    integrationTestRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    integrationTestImplementation "org.mockito:mockito-core:${mockitoVersion}"

    // Unit test dependencies
    testImplementation platform("org.junit:junit-bom:${junitBomVersion}")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
}

// Share JVM arguments across test tasks
tasks.withType(JavaExec).configureEach {
    jvmArgs jvmArguments
}

test {
    useJUnitPlatform()
    jvmArgs(['-XX:+EnableDynamicAgentLoading'] + jvmArguments)
}

// Integration test task
tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
    useJUnitPlatform()
    jvmArgs(['-XX:+EnableDynamicAgentLoading'] + jvmArguments)

    testLogging {
        events "passed"
    }
}

// Ensure integration tests are run during 'check'
check.dependsOn integrationTest

// ------------------------------------
// PUBLISHING TO SONATYPE CONFIGURATION
// ------------------------------------
/*Meta {
    COMPONENT_TYPE = "java" // "java" or "versionCatalog"
    GROUP = "com.jbeacon"
    ARTIFACT_ID = "jbeacon"
    VERSION = "1.0.0"
    PUBLISHING_TYPE = "AUTOMATIC" // USER_MANAGED or AUTOMATIC
    SHA_ALGORITHMS = ["SHA-256", "SHA-512"]
    // sha256 and sha512 are supported but not mandatory. Only sha1 is mandatory but it is supported by default.
    DESC = "GitHub Version Catalog Repository for Personal Projects based on Gradle"
    LICENSE = "Apache-2.0"
    LICENSE_URL = "https://opensource.org/licenses/Apache-2.0"
    GITHUB_REPO = "Ramonster1/JBeacon"
    DEVELOPER_ID = "198125557"
    DEVELOPER_NAME = "Ramon Singh"
}*/


def sonatypeUsername = project.findProperty("sonatypeUsername") // this is defined in ~/.gradle/gradle.properties
def sonatypePassword = project.findProperty("sonatypePassword") // this is defined in ~/.gradle/gradle.properties

sonatypeCentralPublishExtension {
    // Set group ID, artifact ID, version, and other publication details
    groupId = GROUP
    artifactId = ARTIFACT_ID
    version = VERSION
    componentType = COMPONENT_TYPE // "java" or "versionCatalog"
    publishingType = PUBLISHING_TYPE // USER_MANAGED or AUTOMATIC

    // Set username and password for Sonatype repository
    username = "Y3lHYEi+" // System.getenv("SONATYPE_USERNAME") ?: sonatypeUsername
    password = "ZPyJMHeTWee9NGMVUnRyicHabu8BPydO8Dh9FQXpgUon"// System.getenv("SONATYPE_PASSWORD") ?: sonatypePassword

    // Configure POM metadata
    pom {
        name = ARTIFACT_ID
        description = DESC
        url = "https://github.com/${GITHUB_REPO}"
        licenses {
            license {
                name = LICENSE
                url = LICENSE_URL
            }
        }
        developers {
            developer {
                id = DEVELOPER_ID
            }
        }
        scm {
            url = "https://github.com/${GITHUB_REPO}"
            connection = "scm:git:https://github.com/${GITHUB_REPO}"
            developerConnection = "scm:git:https://github.com/${GITHUB_REPO}"
        }
        issueManagement {
            system = ("GitHub")
            url = "https://github.com/${GITHUB_REPO}/issues"
        }
    }
}
